<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../../xsl/page.xsl"?>
<!--
  ronin.rubyforge.org.

  Copyright (c) 2006-2009 Hal Brodigan (postmodern.mod3 at gmail.com)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->

<rubyforge xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Coding Style Guide-Lines</title>

  <page>
    <xi:include href="../_menu.xml" />

    <content>
      <section label="style" title="Coding Style Guide-Lines">
        <subsection label="file_naming" title="File Naming">
          <p>Files should be named after their contained modules/classes.</p>
          <p>The following code would reside in the file <kbd>thing/stuff.rb</kbd>.</p>
          <code>module Thing
  class Stuff
  
    ...

  end
end</code>
        </subsection>

        <subsection label="indentation" title="Indentation">
          <p>
            <u>Two space</u> indentation for Ruby, XML, XSL, HTML and
            Javascript source-code. Tab indentation for other programming
            languages.
          </p>

          <p>
            Also, all code should try to be no wider than 80 columns.
          </p>
        </subsection>

        <subsection label="strings" title="Strings">
          <p>Use double-quotes when necessary, use single-quotes otherwise.</p>
          <code>'i do not need double quotes here, so why use them?'</code>
          <code>"I do need double quotes here, #{var}."</code>
        </subsection>
        
        <subsection label="embedded_strings" title="Embedded Strings">
          <p>Use the <kbd>%{...}</kbd> syntax when embedding large strings into Ruby code</p>
          <code>%{I find this style to be particularly clean.}</code>
        </subsection>

        <subsection label="expressions" title="Expressions">
          <p>
            The <kbd>and</kbd>, <kbd>or</kbd>, <kbd>not</kbd> keywords are
            not the same as their <kbd>&amp;&amp;</kbd>, <kbd>||</kbd>, <kbd>!</kbd>
            counterparts, please use symbolic operators instead.
          </p>
        </subsection>

        <subsection label="statements" title="Statements">
          <p>
            Ruby provides various short-hand statements, that lessen
            repetitive typing. Please use the short-hand statements
            when appropriate, it helps DRY (Don't Repeat Yourself)
            up the code.
          </p>

          <p>Repetitive:</p>
          <code>if !(@var)</code>
          <code>if @var.nil?
  @var = 'default'
end</code>

          <p>DRY:</p>
          <code>unless @var</code>
          <code>@var ||= 'default'</code>
        </subsection>

        <subsection label="defining" title="Defining Modules/Classes">
          <p>Bad:</p>
          <code>class Bla::Ugly
  
  ...
  
end</code>
          <p>Good:</p>
          <code>module Bla
  class Better
    
    ...
    
  end
end</code>
        </subsection>

        <subsection label="global" title="Global Variables">
          <p>
            Avoid using global variables, instead use class variables.
          </p>
          <code>class Important
  
  def Important.data
    @@data ||= {}
  end
  
end</code>
        </subsection>

        <subsection label="blocks" title="Blocks">
          <p>
            Use <kbd>&amp;block</kbd> syntax to explicitly receive and pass
            blocks.
          </p>
          <code>def explicit_block(var,&amp;block)
  ...
  compute(var,&amp;block)
  ...
end</code>
        </subsection>

        <subsection label="send" title="send">
          <p>Always check if the requested method is public.</p>
          <code>def bad_method_proxy(name)
  @obj.send(name)
end</code>

          <code>def better_method_proxy(name)
  if @obj.public_methods.include?(name.to_s)
    return @obj.send(name)
  else
    raise(NoMethodError,"unknown method #{name.dump}",caller)
  end
end</code>

          <p>
            Also, sometimes it is necessary to check if the method is
            not inherited, but defined directly within the class.
          </p>
          <code>def strict_method_proxy(name)
  if @obj.class.public_instance_methods(false).include?(name)
    return @obj.send(name)
  else
    raise(NoMethodError,"undefined method #{name.dump}",caller)
  end
end</code>
        </subsection>
      </section>
    </content>
  </page>
</rubyforge>
