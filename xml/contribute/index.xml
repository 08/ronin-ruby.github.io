<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../../xsl/page.xsl"?>
<!--
  ronin.rubyforge.org.

  Copyright (c) 2006-2009 Hal Brodigan (postmodern.mod3 at gmail.com)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->

<rubyforge xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Contribute</title>

  <page>
    <xi:include href="../_menu.xml" />

    <content>
      <section label="contribute" title="Contribute">
        <subsection label="patches" title="Patches">
          <p>
            If you would like your changes to be included into
            <project-title />, please submit a unified diff created from the
            SVN repository. Submit a <project-patches>bug</project-patches>
            with the patch attached along with a description of what the
            patch changes.
          </p>
        </subsection>

        <subsection label="style" title="Coding Style">
          <p>
            Inorder to keep the source-code of <project-title /> clean
            and readable, those who wish to contribute code to
            <project-title /> should review the project's
            <a href="style.html">coding style guide-lines</a>.
          </p>
        </subsection>

        <subsection label="style" title="Ronin and Git[hub]">
          <p>
            Ronin development colaboration is done with the 
            <a href="http://git-scm.com/">git</a> source code management (SCM)
            system. <a href="http://github.com">Github.com</a> is used to host
            the authortive remote repositories.  By creating a github account
            and forking one of the ronin projects for your development you will
            be integrating into the ronin development infrastructure. This will
            allow core ronin developers to use git and github tools to accept 
            contributions.
          </p>

          <p>
            There is <a href="http://www.google.com/search?q=git+and+github&ie=utf-8&oe=utf-8&aq=t&rls=com.ubuntu:en-US:unofficial&client=firefox-a">a 
            plethora of documentation</a> for getting up to speed with git.  
            It can be difficult to weed through documentation for a tool as
            robust and generic as git and find the few details relavant to get
            started hacking on ronin.  Below is a brief guide for using github
            and git for working on Ronin. 
          </p>

          <list>
            <item>
              <jump name="setup_github">Setting up a github.com account</jump>
            </item>
            <item>
              <jump name="forking">Forking ronin</jump>
            </item>
            <item>
              <jump name="workflow">Git workflow</jump>
            </item>
            <item>
              <jump name="references">Recomended references</jump>
            </item>
          </list>

          <section label="setup_github" title="Setting up a github.com account">
            <p>
            This consists of installing git on your system, creating an account
            on github, associating your git installation with your github 
            account, and getting your ssh key onto github.  
            </p>

            <p>
              Each of these steps are pretty straight forward.  Install git in 
              same fashion as you would for other applications on your system 
              (apt-get, yum, etc on linux 
              <a href="http://github.com/guides/get-git-on-mac">
                OS X docs
              </a>
              , 
              <a href="http://github.com/guides/using-git-and-github-for-the-windows-for-newbies">
                Windows docs
              </a>
              ). The github.com account can be created 
              <a href="https://github.com/signup/free">
                here
              </a>
              , associating your git installation with github.com is documented
              <a href="http://github.com/guides/tell-git-your-user-name-and-email-address">
                here
              </a>
              , and getting your ssh public key onto github.com is documented
              <a href="http://github.com/guides/providing-your-ssh-key">
                here
              </a>.
            </p>

            <p>
              The athoritive source of documentation for using git with 
              Github.com is 
              <a href="http://github.com/guides/home">
                here
              </a>.
            </p>
          </section>

          <section label="forking" title="Forking ronin">
            <p>
              "Forking" a project is a git-ism for making a copy of a source
              code project that can be tracked through github. An initial fork
              of a project is a copy at the point in time that the form was 
              made.  If you want to keep your fork in sync with commits from 
              the origionally forker project you will have to do some 
              additional configuration of your local client.  Forking and 
              staying in sync with the origional project is well documented
              <a href="http://github.com/guides/keeping-a-git-fork-in-sync-with-the-forked-repo">
                here
              </a>.
            </p>
            In this example the github.com user is evoltech.
            checkout your fork of ronin
            <code>$ git clone git@github.com:&lt;username&gt;/ronin</code>
            Add postmodern's (the authoritive ronin repository) remote repo
            <code>
              $ git remote add postmodern git://github.com/postmodern/ronin
            </code>
            Update (pull) updates from postmodern's repo
            <code>$ git pull postmodern</code>
          </section>

          <section label="workflow" title="Git workflow">
            <p>
              Now that you have your own fork of ronin you can hack on it to 
              your heart's content.  You can now commit your changes (save them
              locally with messages about the changes), push them to your 
              remote fork, create branches, and notify postmodern about 
              features and bug fixes you have made.
            </p>

            <p>
              While working on ronin you may make changes to a number of files
              that implement different features or fix bugs.  Each of these can
              be tracked by committing them with a message.  Committing is only
              relevant to the local clone of your remote fork.
              <code>
                $ git commit -m "Added a list of features I want to track" TODO.txt
                $ git commit -m "Fixed bug preventing file inclusion in overlays" lib/ronin/platform/extension.rb
              </code>
              Now you have finished up for the day and you want to save / push
              your changes up onto github, because you know you will be working 
              from a different machine tomorrow, or maybe because you just want 
              to have a backup.
              <code>
                $ git push master
              </code>
              Now a couple days have passed and you are pumped because you 
              fixed like 20 bugs (totally a hypothetical situation because
              agile programming eliminates bugs in code) and added a sick
              new feature for 
              <a href="http://www.youtube.com/watch?v=x3XzPhdBx9g">
                hacking the gibson
              </a>. Problem is that it is 9am and you want to keep working
              on a totally different feature that won't be finished till
              some time next week.  What your gunna do is branch and send
              a "pull notify" to postmodern.
              <code>
                $ git push origin AWESOME_BRANCH
              </code>
              Then follow the 
              <a href="http://github.com/guides/pull-requests">
                pull request documentation
              </a>, being sure to mention your branch name in the message.
          </section>

          <section label="references" title="Recomended References">
            <p>
              Here are a few links to references that may be useful to new git
              and github.com users.
              <a href="http://zrusin.blogspot.com/2007/09/git-cheat-sheet.html">
                Git cheat sheet
              </a> - A totally sweet visual representation of working with git.
            </p>
          </section>

          <p>
            Inorder to keep the source-code of <project-title /> clean
            and readable, those who wish to contribute code to
            <project-title /> should review the project's
            <a href="style.html">coding style guide-lines</a>.
          </p>
        </subsection>
      </section>
    </content>
  </page>
</rubyforge>
